{"ast":null,"code":"var _jsxFileName = \"/home/tunahan/Desktop/testFolder/hooks/src/cards.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { uniqueId } from \"lodash\";\nimport Argentina from './img/Argentina.webp';\nimport Bolivia from './img/Bolivia.webp';\nimport Brazil from './img/Brazil.webp';\nimport Chile from './img/Chile.webp';\nimport Colombia from './img/Colombia.webp';\nimport Ecuador from './img/Ecuador.webp';\nimport Guyana from './img/Guyana.webp';\nimport Paraguay from './img/Paraguay.webp';\nimport Peru from './img/Peru.webp';\nimport Suriname from './img/Suriname.webp';\nimport Uruguay from './img/Uruguay.webp';\nimport Venezuela from './img/Venezuela.webp';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Cards = props => {\n  _s();\n  const displayedOrders = props.displayedOrders;\n  const game = props.game;\n  const setGamePlayed = props.setGamePlayed;\n  const gamePlayed = props.gamePlayed;\n  const [count, setCount] = useState(0);\n  const [bestCount, setBestCount] = useState([0]);\n  const [clickSequence, setClickSequence] = useState([]);\n  const flagArray = [/*#__PURE__*/_jsxDEV(\"img\", {\n    src: Argentina\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 9\n  }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n    src: Bolivia\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 9\n  }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n    src: Brazil\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 9\n  }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n    src: Chile\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 9\n  }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n    src: Colombia\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 9\n  }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n    src: Ecuador\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 9\n  }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n    src: Guyana\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 9\n  }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n    src: Paraguay\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 9\n  }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n    src: Peru\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 9\n  }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n    src: Suriname\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 9\n  }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n    src: Uruguay\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 9\n  }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n    src: Venezuela\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 9\n  }, this)];\n  const saveNumber = divContent => {\n    if (count === 11) {\n      alert('Winner');\n      let best = bestCount;\n      best.push(count + 1);\n      setBestCount(best);\n      setClickSequence([]);\n      setCount(0);\n      setGamePlayed(gamePlayed + 1);\n    } else if (clickSequence.indexOf(divContent) === -1) {\n      let sequence = clickSequence;\n      sequence.push(divContent);\n      setClickSequence(sequence);\n      setCount(count + 1);\n    } else {\n      alert('Game Over');\n      let best = bestCount;\n      best.push(count);\n      setBestCount(best);\n      setClickSequence([]);\n      setCount(0);\n      setGamePlayed(gamePlayed + 1);\n    }\n  };\n  function GenerateCards() {\n    let divs = displayedOrders[count].map(element => {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"innerCards\",\n        onClick: () => saveNumber(element),\n        children: element\n      }, uniqueId(), false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 20\n      }, this);\n    });\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"cards\",\n      children: divs\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 16\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(GenerateCards, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"gameInformation\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"current score: \", count]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"best score: \", Math.max(...bestCount)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"total games played: \", gamePlayed]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 9\n  }, this);\n};\n_s(Cards, \"EWI9yAELU/ROOY3immJVkvpCHgg=\");\n_c = Cards;\nexport default Cards;\nvar _c;\n$RefreshReg$(_c, \"Cards\");","map":{"version":3,"names":["React","useEffect","useState","uniqueId","Argentina","Bolivia","Brazil","Chile","Colombia","Ecuador","Guyana","Paraguay","Peru","Suriname","Uruguay","Venezuela","Cards","props","displayedOrders","game","setGamePlayed","gamePlayed","count","setCount","bestCount","setBestCount","clickSequence","setClickSequence","flagArray","saveNumber","divContent","alert","best","push","indexOf","sequence","GenerateCards","divs","map","element","Math","max"],"sources":["/home/tunahan/Desktop/testFolder/hooks/src/cards.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { uniqueId } from \"lodash\";\nimport Argentina from './img/Argentina.webp'\nimport Bolivia from './img/Bolivia.webp'\nimport Brazil from './img/Brazil.webp'\nimport Chile from './img/Chile.webp'\nimport Colombia from './img/Colombia.webp'\nimport Ecuador from './img/Ecuador.webp'\nimport Guyana from './img/Guyana.webp'\nimport Paraguay from './img/Paraguay.webp'\nimport Peru from './img/Peru.webp'\nimport Suriname from './img/Suriname.webp'\nimport Uruguay from './img/Uruguay.webp'\nimport Venezuela from './img/Venezuela.webp'\n\n\n\nconst Cards = (props) => {\n\n    const displayedOrders = props.displayedOrders\n    const game = props.game\n    const setGamePlayed = props.setGamePlayed\n    const gamePlayed = props.gamePlayed\n\n    const [count, setCount] = useState(0)\n    const [bestCount, setBestCount] = useState([0])\n    const [clickSequence, setClickSequence] = useState([])\n    \n    const flagArray = [\n        <img src={Argentina} />,\n        <img src={Bolivia} />,\n        <img src={Brazil} />,\n        <img src={Chile} />,\n        <img src={Colombia} />,\n        <img src={Ecuador} />,\n        <img src={Guyana} />,\n        <img src={Paraguay} />,\n        <img src={Peru} />,\n        <img src={Suriname} />,\n        <img src={Uruguay} />,\n        <img src={Venezuela} />\n    ]\n\n    const saveNumber = (divContent) => {\n        if(count === 11) {\n            alert('Winner')\n            let best = bestCount\n            best.push(count + 1) \n            setBestCount(best)\n            setClickSequence([])\n            setCount(0)\n            setGamePlayed(gamePlayed + 1)\n        } else if(clickSequence.indexOf(divContent) === -1) {\n            let sequence = clickSequence\n            sequence.push(divContent)\n            setClickSequence(sequence)\n            setCount(count + 1)\n        } else {\n            alert('Game Over')\n            let best = bestCount\n            best.push(count)\n            setBestCount(best)\n            setClickSequence([])\n            setCount(0)\n            setGamePlayed(gamePlayed + 1)\n        }\n\n    }\n\n    function GenerateCards () {\n\n        let divs = displayedOrders[count].map((element) => {\n            return <div key={uniqueId()} className=\"innerCards\" onClick={() => saveNumber(element)}>{element}</div>\n        })\n        return <div className=\"cards\">{divs}</div>\n    }\n\n\n    return (\n        <div >\n            <GenerateCards/>\n            <div className=\"gameInformation\">\n                <div>current score: {count}</div>\n                <div>best score: {Math.max(...bestCount)}</div>\n                <div>total games played: {gamePlayed}</div>\n            </div>\n\n        </div>\n    )\n}\n\nexport default Cards;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}